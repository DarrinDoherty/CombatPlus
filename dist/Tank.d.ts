import { Vector2D, Controls } from './types.js';
import { Bullet } from './Bullet.js';
export declare class Tank {
    position: Vector2D;
    angle: number;
    size: number;
    speed: number;
    color: string;
    playerId: number;
    controls: Controls;
    lastShotTime: number;
    shootCooldown: number;
    isAI: boolean;
    aiState: string;
    aiTarget: Vector2D | null;
    aiLastDirectionChange: number;
    aiDirection: Vector2D;
    aiPersonality: 'aggressive' | 'defensive' | 'sniper' | 'flanker';
    aiPersonalityModifiers: {
        shootingRange: number;
        optimalDistance: number;
        movementSpeed: number;
        aimAccuracy: number;
        aggressiveness: number;
    };
    aiDecisionTimer: number;
    aiCurrentDecision: string;
    aiDecisionDuration: number;
    aiRandomFactor: number;
    isFrozen: boolean;
    frozenUntil: number;
    frozenDuration: number;
    health: number;
    maxHealth: number;
    isDisabled: boolean;
    disabledSince: number;
    repairTime: number;
    team: 'left' | 'right';
    constructor(position: Vector2D, size: number, speed: number, color: string, playerId: number, controls: Controls, isAI?: boolean, personality?: 'aggressive' | 'defensive' | 'sniper' | 'flanker', team?: 'left' | 'right');
    private setPersonalityModifiers;
    update(pressedKeys: Set<string>, canvasWidth: number, canvasHeight: number, channelLeft?: number, channelRight?: number, enemyTank?: Tank): boolean;
    takeDamage(): 'disabled' | 'destroyed' | 'none';
    repair(): void;
    private updateAI;
    private seekCoverBehavior;
    private updateDecisionMaking;
    private makeRandomDecision;
    private isInLineOfSight;
    private findCoverPosition;
    private combatBehavior;
    private patrolBehavior;
    private executeAIMovement;
    private updateManual;
    shouldAIShoot(enemyTank: Tank): boolean;
    canShoot(): boolean;
    shoot(bulletSpeed: number, bulletSize: number): Bullet | null;
    render(ctx: CanvasRenderingContext2D): void;
    freeze(duration?: number): void;
    checkCollision(other: Tank): boolean;
}
